///////////////////////////////////////////////////////////////////////////////
// $Id$

#include "stdhdr.h"
#include "hash.h"

#include "dbgalloc.h" // must be last header

///////////////////////////////////////////////////////////////////////////////
//
// A permutation of [0..255] generated by the following code.
// All hash functions use a "generalized CRC" hash algorithm. See 
// http://burtleburtle.net/bob/hash/doobs.html for an explanation.
//
//   int i, r;
//   unsigned  t;
//   srand(7201969);
//
//   for (i = 0; i < 256; i++)
//      g_RandomValues[i] = (unsigned )i;
//
//   for (i = 0; i < 256; i++)
//   {
//      r = rand() & 0xff;
//      t = g_RandomValues[i];
//      g_RandomValues[i] = g_RandomValues[r];
//      g_RandomValues[r] = t;
//   }
//

static short g_RandomValues[256] =
{
   55, 40, 245, 116, 167, 97, 6, 11, 173, 27, 31, 120, 70, 87, 156, 50, 
   233, 234, 32, 124, 162, 172, 198, 23, 224, 133, 94, 150, 29, 18, 7, 249, 
   79, 235, 141, 91, 34, 8, 125, 74, 61, 122, 209, 131, 220, 137, 12, 69, 
   106, 92, 108, 155, 65, 10, 9, 216, 51, 243, 183, 98, 13, 191, 199, 83, 
   127, 175, 135, 154, 43, 75, 145, 118, 48, 236, 201, 246, 184, 222, 57, 46, 
   56, 151, 114, 134, 119, 178, 136, 231, 36, 197, 148, 58, 89, 250, 103, 164, 
   20, 71, 187, 189, 140, 104, 107, 19, 171, 218, 63, 144, 251, 102, 212, 213, 
   219, 76, 208, 88, 16, 3, 105, 244, 22, 237, 168, 14, 252, 117, 41, 179, 
   42, 5, 229, 44, 180, 100, 170, 128, 210, 215, 195, 35, 242, 68, 21, 2, 
   232, 157, 153, 166, 158, 45, 80, 194, 181, 217, 146, 93, 255, 185, 129, 52, 
   132, 163, 72, 225, 130, 54, 161, 126, 101, 204, 192, 139, 123, 248, 90, 190, 
   200, 254, 169, 95, 25, 203, 221, 143, 85, 241, 1, 226, 206, 112, 230, 182, 
   84, 177, 214, 110, 223, 82, 111, 73, 33, 39, 30, 66, 211, 26, 159, 253, 
   227, 228, 202, 207, 96, 149, 59, 81, 239, 142, 240, 62, 188, 147, 113, 165, 
   138, 4, 38, 24, 15, 205, 78, 49, 0, 121, 28, 238, 176, 53, 17, 174, 
   47, 60, 86, 109, 196, 193, 115, 77, 64, 186, 160, 99, 67, 247, 37, 152, 
};

uint Hash(const void * key, int size)
{
   uint hash = size;
   for (int i = 0; i < size; ++i)
      hash = (hash << 8) ^ g_RandomValues[(hash >> 24) ^ ((const unsigned char*)key)[i]];
   return (hash & 0x1F);
}

// @TODO @HACK
#define LOWORD(l)           ((uint16)(l))
#define HIWORD(l)           ((uint16)(((uint32)(l) >> 16) & 0xFFFF))
#define LOBYTE(w)           ((byte)(w))
#define HIBYTE(w)           ((byte)(((uint16)(w) >> 8) & 0xFF))

uint Hash(const void * ptr)
{
   int hash = 0;
   hash = (hash << 8) ^ g_RandomValues[(hash >> 24) ^ LOBYTE(LOWORD(ptr))];
   hash = (hash << 8) ^ g_RandomValues[(hash >> 24) ^ HIBYTE(LOWORD(ptr))];
   hash = (hash << 8) ^ g_RandomValues[(hash >> 24) ^ LOBYTE(HIWORD(ptr))];
   hash = (hash << 8) ^ g_RandomValues[(hash >> 24) ^ HIBYTE(HIWORD(ptr))];
   return hash;
}

///////////////////////////////////////////////////////////////////////////////
