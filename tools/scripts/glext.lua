-------------------------------------------------------------------------------
-- $Id$

wglCond = "_WIN32"; -- used to #ifdef wgl extensions
glxCond = "__GNUC__"; -- used to #ifdef glx extensions

outFileNameRoot = "glextensions";

-------------------------------------------------------------------------------
-- ignore SGI, IBM, MESA, HP, etc. extensions

allowedVendors =
{
   ["ARB"] = 1,
   ["EXT"] = 1,
   ["NV"] = nil,
   ["ATI"] = nil,
};

function IgnoreVendor(vendor)
   if (allowedVendors[vendor]) then
      return nil; -- don't ignore
   end;
   return 1;
end;

-------------------------------------------------------------------------------
-- @param filename is a path to a GL extension header
-- @param exts is a table that summarizes the GL extensions discovered in the
-- GL extension headers. It is keyed on strings (GL extension names), and
-- each entry is a list of function names. For example.
-- exts["GL_ARB_some_extension"] = { "glSomeFunctionARB", "glSomeFunctionARB", ... }
-- exts["GL_EXT_other_extension"] = { "glSomeFnEXT", "glSomeFnEXT", ... }
-- @return the number of GL extensions discovered in the file

function ReadGlExtensionHeader(filename, exts)
   file = io.open(filename);
   if (file == nil) then
      _ALERT("Unable to open file " .. filename);
      exit(-1);
   end;

   local cur = nil;
   local count = 0;

   for line in file:lines() do
      -- Match lines like "#define GL_VENDOR_extension_name 1"
      s,e,ext,vendor = string.find(line, "#define%s(W?GLX?_(%u+)_[_%l]+)%s1");
      if (s and e and ext and vendor) then
         if (not IgnoreVendor(vendor)) then
            count = count + 1;
            cur = ext;
            exts[ext] = {}
         else
            cur = nil;
         end;
      else
         s,e,fn,params = string.find(line, ".-(w?glX?[%w_]+)%s*(%b());");
         if (s and e and fn and params and cur) then
            table.insert(exts[cur], fn);
         elseif (params == nil and fn ~= nil) then
            _ALERT("no parameters for " .. fn);
         end;
      end;
   end;

   file:close();

   return count;
end;

-------------------------------------------------------------------------------

function indent(n)
   return string.rep(" ", n);
end;

-------------------------------------------------------------------------------
-- @param extKey is the name of a GL extension
-- @param extEntry is a table object containing a list of function names

function ExtensionEmitter(extKey, extEntry)

   if (not type(extEntry) == "table") then
      _ALERT("Expected table but got " .. type(extEntry));
      exit(-1);
   end;

   -- If the extension doesn't have any functions don't emit anything
   if (table.getn(extEntry) == 0) then
      return;
   end;

   local ifdefCondition;

   if (string.find(extKey, "^WGL_")) then
      ifdefCondition = wglCond;
   elseif (string.find(extKey, "^GLX_")) then
      ifdefCondition = glxCond;
   else
      ifdefCondition = nil;
   end;

   if (ifdefCondition) then
      io.write("#ifdef " .. ifdefCondition .. "\n");
   end;

   io.write("EXTENSION_BEGIN(" .. extKey .. ")\n");

   table.foreach(extEntry,
      function(key,value)
         io.write(indent(3) .. "EXTENSION_PROC(PFN" .. string.upper(value) .. "PROC, " .. value .. ");\n");
      end);

   io.write("EXTENSION_END()\n");

   if (ifdefCondition) then
      io.write("#endif\n");
   end;

   io.write("\n");

end;

-------------------------------------------------------------------------------

function WriteHeaderFile(filename, exts, headers)

   if (filename ~= nil) then
      if (io.output(filename) == nil) then
         _ALERT("An error occurred writing to file " .. filename);
         exit(-1);
      end;
   end;

   local slashes = string.rep("/", 80) .. "\n";

   io.write(slashes);

   io.write("// Generated by " .. arg[0] .. " on " .. os.date() .. " from the following GL extension headers:\n");

   if (headers and type(headers) == "table") then
      table.foreachi(headers,
         function(index, value)
            io.write("// " .. indent(3) .. value .. "\n");
         end);
   end;

   io.write(slashes);
   io.write("\n");

   table.foreach(exts, ExtensionEmitter);

   io.write(slashes);
   io.write("\n");

   if (filename ~= nil) then
      io.output(); -- close the file
   end;

end;

-------------------------------------------------------------------------------

function main()

   extensions = {};
   headers = {};

   table.foreachi(arg,
      function(index, value)
         if (ReadGlExtensionHeader(value, extensions)) then
            table.insert(headers, value);
         end;
      end);

   WriteHeaderFile(outFileNameRoot .. ".h", extensions, headers);

end;

main();

-------------------------------------------------------------------------------
